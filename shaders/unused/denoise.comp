#version 450 core

#define varp highp

precision varp float;
precision varp int;

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable
#extension GL_KHR_shader_subgroup_vote : enable

layout(set = 0, binding = 0, rgba8) uniform image2D  matNorm;
layout(set = 0, binding = 1       )  uniform sampler2D  depth;
layout(set = 0, binding = 2, rgba16) uniform image2D raytraced_frame;
layout(set = 0, binding = 3, rgba16) uniform image2D  denoised_frame;
layout(set = 0, binding = 4       )  uniform sampler2D mixing_ratio_image;
layout(set = 0, binding = 5, r32f       ) uniform image2D voxelPalette;

layout(push_constant) uniform constants{
    int iteration;
    int radius;
} PushConstants;

// #define A_RADIUS 2

ivec2 size;
vec2 ratio;
int iteration;
int radius;
// vec2 load_old_uv(ivec2 pixel){
//     vec2 old_uv = imageLoad(oldUv, pixel).xy;
//     return old_uv;
// }
// vec3 decode(vec2 f){
//     f = f * 2.0 - 1.0;
 
//     vec3 n = vec3(f.x, f.y, 1.0 - abs(f.x) - abs(f.y));
//     float t = clamp(-n.z, 0, 1);
//     n.x += n.x > 0.0 ? -t : t;
//     n.y += n.y > 0.0 ? -t : t;
//     return normalize(n); //todo:
// }
struct Material{
    vec3 color; //for each color
    float emmitance;
    float smoothness;
    float transparancy;
};
Material GetMat(in int voxel){
    Material mat;

    mat.color.r      = imageLoad(voxelPalette, ivec2(0,voxel)).r;
    mat.color.g      = imageLoad(voxelPalette, ivec2(1,voxel)).r;
    mat.color.b      = imageLoad(voxelPalette, ivec2(2,voxel)).r;
    mat.transparancy = 1.0 - imageLoad(voxelPalette, ivec2(3,voxel)).r;
    mat.emmitance    =       imageLoad(voxelPalette, ivec2(4,voxel)).r;
    mat.smoothness   = 1.0 - imageLoad(voxelPalette, ivec2(5,voxel)).r;
    mat.transparancy = 0;

    // mat.smoothness = 0.5;
    // mat.smoothness = 0;
    // if(voxel < 30) 
    // mat.color.rgb = vec3(0.9);
    // mat.color.rgb = clamp(mat.color.rgb,0.2,1);
    // mat.emmitance = .0;
return mat;
}
vec3 load_norm(ivec2 pixel){
    vec3 norm = (imageLoad(matNorm, pixel).gba);
    return norm;
}
int load_mat(ivec2 pixel){
    int mat = int(round(imageLoad(matNorm, pixel).x*127.0))+127;
    return mat;
}

const float COLOR_ENCODE_VALUE = 5.0;
vec3 decode_color(vec3 encoded_color){
    return clamp(encoded_color,0,1)*vec3(COLOR_ENCODE_VALUE);
    // return encoded_color;
}
vec3 encode_color(vec3 color){
    return clamp(color/vec3(COLOR_ENCODE_VALUE), 0,1);
    // return color;
}

float load_depth(ivec2 pixel){
    // ivec2 size = imageSize(Gbuffer);
    // if(any(greaterThanEqual(pixel, size)) || any(lessThan(pixel, ivec2(0)))) return 100000000000000.0;
    
    vec2 uv = (vec2(pixel)+0.5)/vec2(size);
    float depth_encoded = texture(depth, uv).x;
    // float depth_encoded = imageLoad(depth, pixel).x;
    return (1.0-depth_encoded)*1000.0;
}

//how bright pixel is
float luminance(vec3 color){
    vec3 luminance_const = vec3(0.2126, 0.7152, 0.0722);
    return dot(color, luminance_const);
}
// float calculate_weight(
//     vec3 color, vec3 color_center,
//     vec3 normal, vec3 normal_center,
//     int mat, int mat_center,
//     float depth, float depth_center,
//     ivec2 pix, ivec2 center_pix,
//     float _phiDepth
// ){
//     float weight;

//     float phiNormal, phiDepth, phiIllum;
//     phiNormal = 128.0;
//     phiDepth = 0.5;
//     // phiIllum = 0.7;
//     // phiIllum = 0;
    
//     // float weightPos = distance(vec2(pix), vec2(center_pix));
//     // weightPos*=weightPos;
//         float weightPos=0;
//     const float weightNormal = pow(clamp(dot(normal_center, normal), 0, 1), phiNormal);
//     const float weightZ = (phiDepth == 0) ? 0.0f : abs(depth_center - depth) / phiDepth;
//     const float weightLillum = (phiIllum == 0) ? 0.0f : abs(luminance(color_center) - luminance(color)) / phiIllum;
//     const float weigth_mat = (mat == mat_center) ? 1 : 0;

//     weight = exp(0.0 - weightLillum - weightZ - weightPos) * weightNormal * weigth_mat;

//     return weight;
// }
// //well, its time to implement denoiser. Spatial after temporal seems fine
// vec3 denoise(ivec2 center_pix){
//     ivec2 screenSize = size;

//     float sum_weight = 0.0;
//     vec3 sum_color = vec3(0);

//      vec3 color_center = imageLoad(raytraced_frame, center_pix).rgb;
//     float depth_center = load_depth(center_pix);
//       int   mat_center = load_mat(center_pix);
//      vec3  norm_center = load_norm(center_pix);

//     const int radius = 5;
//     for(int xx = -radius; xx <= radius; xx++){
//     for(int yy = -radius; yy <= radius; yy++){
//         ivec2 pix = center_pix + ivec2(xx,yy);
//         const bool inside = all(greaterThanEqual(pix, ivec2(0))) && all(lessThan(pix, screenSize));
//         const bool samePixel = (xx == 0 && yy == 0);
//         if (inside){
//              vec3 color = imageLoad(raytraced_frame, pix).rgb;
//             float depth = load_depth(pix);
//               int mat   = load_mat(pix);
//              vec3 norm  = load_norm(pix);
            
//             float phiDepth = max(depth, 1e-8) * 3.0;

//             float weight = calculate_weight(
//                 color, color_center,
//                 norm, norm_center,
//                 mat, mat_center,
//                 depth, depth_center,
//                 pix, center_pix,
//                 phiDepth
//             );

//             sum_color += weight*color;
//             sum_weight+= weight;
//         }
//     }}

//     return sum_color / sum_weight;
// }


//CaLlMeKeRnEl
// #define A_RADIUS 2
// #if A_RADIUS == 3
//     #error "define weights"
    // float atrous_weight[5] = {1.0/16.0, 1.0/4.0, 3.0/8.0, 1.0/4.0, 1.0/16.0};
    float atrous_weight_3[7] = {
        1.0 / 64.0,
        6.0 / 64.0,
        15.0 / 64.0,
        20.0 / 64.0,
        15.0 / 64.0,
        6.0 / 64.0,
        1.0 / 64.0};
// #elif A_RADIUS == 2
    float atrous_weight_2[5] = {1.0/16.0, 4.0/16.0, 6.0/16.0, 4.0/16.0, 1.0/16.0};
// #elif A_RADIUS == 1
    float atrous_weight_1[3] = {1.0/4.0, 2.0/4.0, 1.0/4.0};
// #endif

const float view_width  = 1920.0/ 5.0; //in voxels
const float view_height = 1080.0/ 5.0; //in voxels
vec3 get_relative_origin_from_depth(float depth, vec2 pix_shift){
    const vec2 view_size = vec2(view_width, view_height);
    const vec2 shift_scaled = (pix_shift/vec2(size))*view_size;
    // const vec2 shift_scaled = (pix_shift/vec2(view_size))*vec2(size);
    // const vec2 shift_scaled = 
    
    vec3 origin = 
        (vec3(1,0,0)*shift_scaled.x) + 
        (vec3(0,1,0)*shift_scaled.y) +
        (vec3(0,0,1)*depth);
    return origin;
}

float calculate_weight_atrous(
    vec3 color, vec3 color_center,
    vec3 normal, vec3 normal_center,
    int mat, int mat_center,
    float depth, float depth_center,
    int x, int y,
    int real_x, int real_y
    ,float roughness
){
    float weight;

    float phiNormal, phiDepth, phiIllum, phiWorldPos;
    phiDepth = 0.0;
    phiIllum = 0.0;
    phiWorldPos = 0.0;
    phiNormal = 128.0;
    // phiDepth = _phiDepth;
    // phiDepth = 1.5;
    // phiDepth = 12;
    // phiIllum = 2.0;
    // phiIllum    = clamp((roughness),0,1)*5.0;
    // phiWorldPos = 3.0;
    phiWorldPos = 1.0 * clamp(roughness,0.3,1);
    
    float weightPos;
         if(radius == 1){
        weightPos = (atrous_weight_1[x+1]) * (atrous_weight_1[y+1]);
    } 
    else if(radius == 2){
        weightPos = (atrous_weight_2[x+2]) * (atrous_weight_2[y+2]);
    }
    else if(radius == 3){
        weightPos = (atrous_weight_3[x+3]) * (atrous_weight_3[y+3]);
    }
    // phiDepth *= weightPos;
    const float weightNormal = float(dot(normal_center, normal) > .9);
    // const float weightWorldPos = (phiWorldPos==0)? 0.0 : distance(
    //     get_relative_origin_from_depth(depth_center, vec2(0,0)),
    //     get_relative_origin_from_depth(depth       , vec2(real_x,real_y))) / phiWorldPos;
    float fx = float(real_x); float fy = float(real_y);
    float fd = (depth-depth_center);
    const float weightWorldPos = (phiWorldPos==0)? 0.0 : sqrt((fx*fx + fy*fy)/25.0 + fd*fd) / phiWorldPos;
    const float weightZ      = (phiDepth == 0) ? 0.0f : (abs(depth_center - depth) / phiDepth);
    // const float weightZ      = (phiDepth == 0) ? 1.0f : float(abs(depth_center - depth) < phiDepth);
    const float weightLillum = (phiIllum == 0) ? 0.0f : abs(luminance(color_center) - luminance(color)) / phiIllum;
    // const float weightLillum = (phiIllum == 0) ? 0.0f : abs(distance(GetMat(mat_center).color, GetMat(mat).color)) / phiIllum;
    const float weigth_mat = (mat == mat_center) ? 1.0: 0.0;

    weight = exp(0.0 - weightLillum - weightZ - weightWorldPos)* weightPos * weightNormal * weigth_mat;

    return weight;
}
// PushConstants.iteration
ivec2 get_atrous_pix(int x, int y, ivec2 center_pix, int iter){
    // int radius = iter;
    ivec2 shift = ivec2(x,y)*int(1 << iter);
    // ivec2 shift = ivec2(x,y)*int(1 + iter);
    return center_pix+shift;
}
//multi-pass less reads, lower memory coherence, better quality
vec3 denoise_atrous(ivec2 center_pix){
    float sum_weight = 0.0;
     vec3 sum_color  = vec3(0);

     vec3 color_center = decode_color(imageLoad(raytraced_frame, center_pix).rgb);
    float depth_center = load_depth(center_pix);
      int   mat_center = load_mat(center_pix);
     vec3  norm_center = load_norm(center_pix);
    float center_rough = 1.0-GetMat(mat_center).smoothness;

    for(int xx = -radius; xx <= radius; xx++){
    for(int yy = -radius; yy <= radius; yy++){
        ivec2 pix = get_atrous_pix(xx, yy, center_pix, PushConstants.iteration);
        bool inside = all(greaterThanEqual(pix, ivec2(0))) && all(lessThan(pix, size));
        bool same_pix = ((xx==0) && (yy==0));
        // bool same_pix = (center_pix == pix);
        // if ((inside) && (!same_pix)){
        if ((inside)){
             vec3 color = decode_color(imageLoad(raytraced_frame, pix).rgb);
            float depth = load_depth(pix);
              int mat   = load_mat(pix);
             vec3 norm  = load_norm(pix);
            
            float weight = calculate_weight_atrous(
                color, color_center,
                norm, norm_center,
                mat, mat_center,
                depth, depth_center,
                xx, yy,
                pix.x-center_pix.x, pix.y-center_pix.y
                ,center_rough
            );

            sum_color += weight*color;
            sum_weight+= weight;
        }
    }}

    return sum_color / sum_weight;
}
// #pragma optionNV(unroll all) 
layout(local_size_x = 8, local_size_y = 8) in;
void main(void){
    size = imageSize(raytraced_frame);
    // radius = 2;
    radius = PushConstants.radius;
    // if(PushConstants.radius==2){
    //     radius = 1;
    // };

    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    if(any(greaterThanEqual(pix, size))) return;

    // ratio = vec2(imageSize(matNorm))/vec2(size);
    // float mix_ratio = texture(mixing_ratio_image, ((vec2(pix)+0.5) / vec2(size))/1.0).x;
    // vec3 color = denoise(pix);
    // if(PushConstants.iteration == 0){imageStore(denoised_frame, pix, imageLoad(raytraced_frame, pix));}
    // float total_mix_ratio = subgroupAdd(mix_ratio) / float(gl_SubgroupSize);
    // const float target_mix_ratio = 0.98;
        // imageStore(denoised_frame, pix, vec4(1));
    // subgroupm
    // bool b = (total_mix_ratio > target_mix_ratio) && (PushConstants.radius == 1);
    // if(b) {
    //     return;
    // }

    // imageStore(denoised_frame, pix, vec4(color,1));
    vec3 color;
    color = denoise_atrous(pix);
    // color = clamp(decode_color(imageLoad(denoised_frame, pix).xyz), 0,10);
    // imageStore(raytraced_frame, pix, vec4(color,1));

    imageStore(denoised_frame, pix, vec4(encode_color(color),1));
    // color.r =0;
    // vec3 color = imageLoad(raytraced_frame, pix).xyz;
    // vec3 old_color = imageLoad(denoised_frame, pix).xyz;
    // color = mix(color, old_color, 0.99);
}
#version 450 core

precision highp int;
precision highp float;
#extension GL_KHR_shader_subgroup_arithmetic : enable

//sadly there is no way to use specialization constants for this
#define varp highp

layout(set = 0, binding = 0, r16i       ) uniform iimage3D blocks;
layout(set = 0, binding = 1, r8ui       ) uniform uimage3D blockPalette;
layout(set = 0, binding = 2, r32f       ) uniform image2D voxelPalette;
layout(set = 0, binding = 3, rgba16     ) uniform image3D radianceCache;

// layout(constant_id = 0) const int RAYS_PER_PROBE = 32;
layout(constant_id = 1) const int BLOCK_PALETTE_SIZE_X = 64;
layout(constant_id = 2) const int MAX_DEPTH = 5;
layout(constant_id = 3) const float REACTIVNESS = 0.01;

layout(push_constant) uniform constants{
    varp int timeSeed;
} PushConstants;

#define RAYS_PER_PROBE (32) //TODO: change to spec const

const varp float PI = 3.1415926535897932384626433832795;
const varp float FAR_DISTANCE = 100000.0;

const varp ivec3 world_size = ivec3(48,48,16);
varp vec3 globalLightDir = normalize(vec3(0.5, 0.5, -0.9));

struct Material{
    varp vec3 color;
    varp float emmitance;
    varp float roughness;
    varp float transparancy;
};

vec2 random_storage;
varp float Random1D(){
    // float res = sin((dot(random_storage, vec2(12.9898, 78.233))) * 43758.5453);
    // random_storage.x = random_storage.y;
    // random_storage.y = res;
    
    float res = fract(sin(dot(random_storage, vec2(12.9898,78.233))) * 43758.5453123);
    random_storage.x = random_storage.y;
    random_storage.y = res;

    // return sin(sin(res*780.233)*43758.5453);
    return (res);
}

vec2 Random2D(){
    return (vec2(Random1D(), Random1D()));
}
varp vec3 Random3D() {
    return vec3(Random1D(), Random1D(), Random1D());
}

varp vec3 randomSpherePoint(varp vec3 rand) {
    varp float ang1 = (rand.x + 1.0) * PI; // [-1..1) -> [0..2*PI)
    varp float u = rand.y; // [-1..1), cos and acos(2v-1) cancel each other out, so we arrive at [-1..1)
    varp float u2 = u * u;
    varp float sqrt1MinusU2 = sqrt(1.0 - u2);
    varp float x = sqrt1MinusU2 * cos(ang1);
    varp float y = sqrt1MinusU2 * sin(ang1);
    varp float z = u;
    return vec3(x, y, z);
}

varp vec3 NormalOrientedHemispherePoint(varp vec3 rand, varp vec3 n){
    varp vec3 v = randomSpherePoint(rand);
    return v * sign(dot(v, n));
}

varp vec3 randomCosineWeightedHemispherePoint(varp vec3 rand, varp vec3 n) {
    varp float r = rand.x * 0.5 + 0.5; // [-1..1) -> [0..1)
    varp float angle = PI*rand.y + PI; // [-1..1] -> [0..2*PI)
    varp float sr = sqrt(r);
    varp vec2 p = vec2(sr * cos(angle), sr * sin(angle));
    varp vec3 ph = vec3(p.xy, sqrt(1.0 - p*p));
    varp vec3 tangent = normalize(rand);
    varp vec3 bitangent = cross(tangent, n);
    tangent = cross(bitangent, n);
    
    return tangent * ph.x + bitangent * ph.y + n * ph.z;
    }

varp int GetBlock(in varp  ivec3 block_pos){
    varp int block;
    block = int((imageLoad(blocks, block_pos).r));
    return block;
}

varp ivec3 voxel_in_palette(varp ivec3 relative_voxel_pos, varp int block_id) {
    varp int block_x = block_id % BLOCK_PALETTE_SIZE_X;
    varp int block_y = block_id / BLOCK_PALETTE_SIZE_X;

    return relative_voxel_pos + ivec3(16*block_x, 16*block_y, 0);
}
varp int GetVoxel(in varp ivec3 pos){
    varp int voxel;

    varp ivec3 block_pos = pos / 16;
    varp ivec3 relative_voxel_pos = pos % 16;

    varp int block_id = GetBlock(block_pos);
    varp ivec3 voxel_pos = voxel_in_palette(relative_voxel_pos, block_id);
    voxel = int(imageLoad(blockPalette, voxel_pos).r);

    return voxel;
}
void SetVoxel(in varp ivec3 pos, in varp uint voxel){
    varp ivec3 block_pos = pos / 16;
    varp ivec3 relative_voxel_pos = pos % 16;

    varp int block_id = GetBlock(block_pos);
    varp ivec3 voxel_pos = voxel_in_palette(relative_voxel_pos, block_id);
    
    imageStore(blockPalette, voxel_pos, uvec4(voxel));
}

Material GetMat(in varp int voxel){
    Material mat;

    mat.color.r      = imageLoad(voxelPalette, ivec2(0,voxel)).r;
    mat.color.g      = imageLoad(voxelPalette, ivec2(1,voxel)).r;
    mat.color.b      = imageLoad(voxelPalette, ivec2(2,voxel)).r;
    // mat.transparancy = 1.0 - imageLoad(voxelPalette, ivec2(3,voxel)).r;
    mat.emmitance    =       imageLoad(voxelPalette, ivec2(4,voxel)).r;
    mat.roughness    =       imageLoad(voxelPalette, ivec2(5,voxel)).r;
    mat.transparancy = 0;

return mat;
}

bool initTvals(out varp vec3 tMax, out varp vec3 tDelta, out varp ivec3 blockPos, in varp vec3 rayOrigin, in varp vec3 rayDirection){
    varp vec3 effective_origin = rayOrigin;

    varp vec3 block_corner1 = (floor(effective_origin) - effective_origin)/rayDirection; //now corners are relative vectors
    varp vec3 block_corner2 = (floor(effective_origin) - effective_origin)/rayDirection  + 1.0/rayDirection;
    tMax.x = max(block_corner1.x, block_corner2.x); //1 of theese will be negative so max is just to get positive
    tMax.y = max(block_corner1.y, block_corner2.y);
    tMax.z = max(block_corner1.z, block_corner2.z);

    tDelta = 1.0 / abs(rayDirection); //how many dir vectors needeed to move 1.0 across each axys
    blockPos = ivec3(effective_origin); //round origin to block pos

    return true;
}

//is actually precise
bool CastRay_precise(in varp vec3 rayOrigin, in varp vec3 rayDirection, 
        out varp float fraction, out varp vec3 normal, out Material material, varp float ignored_voxel, in varp int current_reflection){
    bool block_hit = false;

    varp ivec3 steps;
    steps = ivec3(greaterThan(rayDirection, vec3(0)));
    steps = 2 * steps + (-1);

    varp vec3 fsteps = vec3(steps);

    varp vec3 tMax = vec3(0);
    varp vec3 tDelta = vec3(0);
    varp ivec3 voxel_pos = ivec3(0);
    varp float block_fraction = 0.0;

    varp ivec3 fcurrentStepDiretion = ivec3(0);

    initTvals(tMax, tDelta, voxel_pos, rayOrigin, rayDirection); //does not intersect with scene
    
    varp int current_voxel = GetVoxel(voxel_pos);

    varp int max_steps = 256;
    
    varp int iterations = 0;
    while (true) {

        bool xLy = tMax.x <= tMax.y;
        bool xLz = tMax.x <= tMax.z;
        bool yLz = tMax.y <= tMax.z;

        //LOL no perfomance benefit currently but it was there last time i tested it TODO
        fcurrentStepDiretion.x = int(int(( xLy) && ( xLz)));
        fcurrentStepDiretion.y = int(int((!xLy) && ( yLz)));
        fcurrentStepDiretion.z = int(int((!xLz) && (!yLz)));

        voxel_pos += steps * ivec3(fcurrentStepDiretion);
        tMax += tDelta * fcurrentStepDiretion;

        
        current_voxel = GetVoxel(voxel_pos);
        
        if (current_voxel != 0){
            block_hit = true;
            break;
        }
        // if (any(lessThan(voxel_pos,ivec3(0))) || any(greaterThanEqual(voxel_pos, world_size*ivec3(16)))) {
        //     block_hit = false;
        //     break;
        // }
        if ((iterations++ >= max_steps) || (any(lessThan(voxel_pos,ivec3(0))) || any(greaterThanEqual(voxel_pos, world_size*ivec3(16))))) {
            block_hit = false;
            break;
        }
    }


    normal = -(fsteps * fcurrentStepDiretion);
    varp vec3 tFinal = tMax - tDelta;
    // block_fraction += dot(tFinal, fcurrentStepDiretion);
    block_fraction = dot(tFinal, fcurrentStepDiretion);

    material = GetMat(current_voxel);
    fraction = block_fraction;

    return (block_hit);
}

void ProcessHit(inout varp vec3 origin, inout varp vec3 direction, 
                in varp float fraction, in varp vec3 normal, in Material material, 
                inout varp vec3 accumulated_light, inout varp vec3 accumulated_reflection){

            varp vec3 new_origin = origin + (fraction * direction);

            varp vec3 hemisphereDistributedDirection = NormalOrientedHemispherePoint(Random3D(), normal);

            varp vec3 new_direction = hemisphereDistributedDirection;

                varp vec3 idealReflection = reflect(direction, normal);
                new_direction = normalize(mix(idealReflection, new_direction, material.roughness));
                new_origin += normal * 0.001;
                accumulated_reflection *= material.color;
                accumulated_light += accumulated_reflection * material.emmitance;
                // accumulated_light += vec3(0.8) * 0.1 * accumulated_reflection;

            // direction = reflect(direction,normal);
            direction = new_direction;
            origin = new_origin;

}

vec3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * PI * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(clamp(1.0 - cosTheta * cosTheta, 0, 1));

    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}
//calculates ray direction from probe_id distributing ray_dir's over sphere
vec3 probeId_to_rayDir(int probe_id){
    vec3 direction = vec3(0);

    direction = sphericalFibonacci(float(probe_id), float(RAYS_PER_PROBE));

    return direction;
}

vec3 trace_ray(vec3 ray_pos, vec3 ray_dir){
    float fraction = 0.0;
    vec3 normal = vec3(0);

    vec3 origin = ray_pos;
    vec3 direction = ray_dir;

    vec3 light = vec3(0);
    vec3 reflection = vec3(1);

    Material material;
    for (int i = 0; (i < MAX_DEPTH); i++)
    {
        bool hit = CastRay_precise(origin, direction, fraction, normal, material, 9999.0, i);
        
        if(!hit) break;
        ProcessHit(origin, direction, 
            fraction, normal, material, 
            light, reflection);
        
        if(length(reflection) < 0.1 || length(light) > sqrt(2.0)) break;
    }
    varp float global_light_participance = -dot(direction, globalLightDir);
    // vec3 tmp = vec3(0);
    if (global_light_participance > 0.9) {
        light += (vec3(.9,.9,.6)*3.0) * reflection * global_light_participance / 2.0;
    }
    varp float ndot = (dot(normal, globalLightDir));
    varp float _global_light_participance = (ndot>0.1)? material.roughness * ndot * 0.5 : 0.0;
    light += (vec3(.9,.9,.6)*3.0) * reflection * _global_light_participance / 2.0;

    return light;
}

void store_probe(int probe_id, ivec3 probe_pos, vec3 accumulated_light){
    //probes are stored as 32-wide lines for x in world_size 3d images
    ivec3 subprobe_pos;
          subprobe_pos.x  = probe_pos.x*RAYS_PER_PROBE + probe_id; //same as local_pos actually but its optimized away and worth it for modularity
          subprobe_pos.yz = probe_pos.yz; //reuses but its optimized away

    vec3 old_light = clamp(imageLoad(radianceCache, subprobe_pos).xyz, 0, 1);

    vec3 new_light = mix(old_light, accumulated_light, REACTIVNESS);

    // new_light = vec3(probe_pos) / vec3(world_size);
    
    imageStore(radianceCache, subprobe_pos, vec4(new_light,1));
}

layout(local_size_x = RAYS_PER_PROBE, local_size_y = 1, local_size_z = 1) in;
void main(){
    ivec3 local_pos = ivec3(gl_GlobalInvocationID.xyz);

    float seed = float(PushConstants.timeSeed);
    random_storage = vec2(sin(local_pos.x*seed), sin(seed*local_pos.y));
    
    int probe_id = local_pos.x % RAYS_PER_PROBE;

    ivec3 probe_pos = ivec3(local_pos);
          probe_pos.x /= RAYS_PER_PROBE;

    vec3 ray_pos = vec3(probe_pos) * 16.0 + 8.0;
    vec3 ray_dir = probeId_to_rayDir(probe_id);
        //  ray_dir = normalize(mix(ray_dir, NormalOrientedHemispherePoint(Random3D(), ray_dir), 0.8));
        //  ray_dir = normalize(ray_dir + 1.0 * (Random3D() - 0.5));
        //  ray_dir = normalize(ray_dir + 1.0 * (Random3D() - 0.5));
        ray_dir = randomCosineWeightedHemispherePoint(Random3D(), ray_dir);
    // randomVec = vec3(local_pos.x, local_pos.y, local_pos.z);
    
    vec3 ray_light = trace_ray(ray_pos, ray_dir);
    ray_light = subgroupAdd(ray_light) / gl_SubgroupSize;
    
    if(subgroupElect()){
    store_probe(probe_id, probe_pos, ray_light/2.0);
    }
}
#version 450 core

/*
shader to color lowres frame
ambient+ sampled radiance cache + glossy
*/

precision highp int;
precision highp float;
#extension GL_KHR_shader_subgroup_arithmetic : enable

#define varp highp

layout(push_constant) uniform constants{
    varp vec3 camera_pos;
    varp  int timeSeed;
    varp  vec4 camera_direction;
} PushConstants;

layout(set = 0, binding = 0, rgba8_snorm) uniform   image2D matNorm;
layout(set = 0, binding = 1             ) uniform sampler2D depthBuffer;
layout(set = 0, binding = 2, r16i       ) uniform  iimage3D blocks;
layout(set = 0, binding = 3, r8ui       ) uniform  uimage3D blockPalette;
layout(set = 0, binding = 4, r32f       ) uniform   image2D voxelPalette;
layout(set = 0, binding = 5, rgba8ui    ) uniform  uimage2D step_count;
layout(set = 0, binding = 6, rgba16     ) uniform   image2D outFrame;
layout(set = 0, binding = 7, rgba16     ) uniform   image3D radianceCache;

#define RAYS_PER_PROBE (32)
ivec2 size;
const varp ivec3 world_size = ivec3(48,48,16);
const varp float view_width  = 1920.0 / 10.0; //in block_diags
const varp float view_height = 1080.0 / 10.0; //in blocks

vec3 cameraRayDirPlane;
vec3 horizline;
vec3 vertiline;

vec2 inverseFibonacciPoint(vec3 direction) {
    const float TWO_PI = 6.28318530718; // 2 * Pi
    const float GOLDEN_RATIO = (1.0 + sqrt(5.0)) / 2.0; // Golden ratio
    const float NUM_POINTS = RAYS_PER_PROBE; // Total number of points

    // Compute the index scale factor
    float scaleFactor = max(2.0, floor(log2(NUM_POINTS * TWO_PI * 0.5 * sqrt(5.0) * (1.0 - direction.z * direction.z)) / log2(GOLDEN_RATIO + 1.0)));
    float phiScale = pow(GOLDEN_RATIO, scaleFactor) / sqrt(5.0);
    
    vec2 fibonacciSeq = vec2(round(phiScale), round(phiScale * GOLDEN_RATIO)); // |Fk|, |Fk+1|
    
    vec2 ka = 2.0 * fibonacciSeq / NUM_POINTS;
    vec2 kb = TWO_PI * (fract((fibonacciSeq + 1.0) * GOLDEN_RATIO) - (GOLDEN_RATIO - 1.0));    

    mat2 inverseMatrix = mat2(ka.y, -ka.x, kb.y, -kb.x) / (ka.y * kb.x - ka.x * kb.y);
    vec2 indexCoord = floor(inverseMatrix * vec2(atan(direction.y, direction.x), direction.z - 1.0 + 1.0 / NUM_POINTS));

    float minDistance = 8.0;
    float closestIndex = 0.0;

    for (int step = 0; step < 4; step++) 
    {
        vec2 uv = vec2(step & 1, step >> 1);
        float id = clamp(dot(fibonacciSeq, uv + indexCoord), 0.0, NUM_POINTS - 1.0); // All quantities are integers
        
        float phi = TWO_PI * fract(id * GOLDEN_RATIO);
        float cosTheta = 1.0 - (2.0 * id + 1.0) / NUM_POINTS;
        float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
        
        vec3 point = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
        float distanceSquared = dot(point - direction, point - direction);
        
        if (distanceSquared < minDistance) 
        {
            minDistance = distanceSquared;
            closestIndex = id;
        }
    }

    return vec2(closestIndex, sqrt(minDistance));
}

struct NearestPoint {
    float index;
    float distance;
};

// Function to get the 4 nearest points and their distances
NearestPoint[4] findNearestPoints(vec3 direction, float NUM_POINTS) 
{
    const float TWO_PI = 6.28318530718;                // 2 * Pi
    const float GOLDEN_RATIO = (1.0 + sqrt(5.0)) / 2.0; // Golden ratio

    // Compute the index scale factor
    float scaleFactor = max(2.0, floor(log2(NUM_POINTS * TWO_PI * 0.5 * sqrt(5.0) * (1.0 - direction.z * direction.z)) / log2(GOLDEN_RATIO + 1.0)));
    float phiScale = pow(GOLDEN_RATIO, scaleFactor) / sqrt(5.0);
    
    vec2 fibonacciSeq = vec2(round(phiScale), round(phiScale * GOLDEN_RATIO)); // |Fk|, |Fk+1|
    
    vec2 ka = 2.0 * fibonacciSeq / NUM_POINTS;
    vec2 kb = TWO_PI * (fract((fibonacciSeq + 1.0) * GOLDEN_RATIO) - (GOLDEN_RATIO - 1.0));    

    mat2 inverseMatrix = mat2(ka.y, -ka.x, kb.y, -kb.x) / (ka.y * kb.x - ka.x * kb.y);
    vec2 indexCoord = floor(inverseMatrix * vec2(atan(direction.y, direction.x), direction.z - 1.0 + 1.0 / NUM_POINTS));

    NearestPoint nearestPoints[4];
    for (int i = 0; i < 4; i++) {
        nearestPoints[i].distance = 8.0;
        nearestPoints[i].index = 0.0;
    }

    for (int step = 0; step < 4; step++) 
    {
        vec2 uv = vec2(step & 1, step >> 1);
        float id = clamp(dot(fibonacciSeq, uv + indexCoord), 0.0, NUM_POINTS - 1.0); // All quantities are integers
        
        float phi = TWO_PI * fract(id * GOLDEN_RATIO);
        float cosTheta = 1.0 - (2.0 * id + 1.0) / NUM_POINTS;
        float sinTheta = sqrt(1.0 - cosTheta * cosTheta);
        
        vec3 point = vec3(cos(phi) * sinTheta, sin(phi) * sinTheta, cosTheta);
        float distanceSquared = dot(point - direction, point - direction);
        
        for (int j = 0; j < 4; j++) {
            if (distanceSquared < nearestPoints[j].distance) {
                for (int k = 3; k > j; k--) {
                    nearestPoints[k] = nearestPoints[k - 1];
                }
                nearestPoints[j].distance = distanceSquared;
                nearestPoints[j].index = id;
                break;
            }
        }
    }

    return nearestPoints;
}

// Assume get_color returns a vec3 color for a given index
vec3 get_color(int index, ivec3 probe_ipos){
    ivec3 probe_ipos_clamped = clamp(probe_ipos, ivec3(0), world_size);
    ivec3 subprobe_pos;
          subprobe_pos.x  = probe_ipos_clamped.x*RAYS_PER_PROBE + index; //same as local_pos actually but its optimized away and worth it for modularity
          subprobe_pos.yz = probe_ipos_clamped.yz; //reuses but its optimized away
    // vec3 light = imageLoad(radianceCache, clamp(subprobe_pos, ivec3(0), world_size)).xyz;
    vec3 light = imageLoad(radianceCache, (subprobe_pos)).xyz;
    return clamp(light, 0, 1);
}

// Function to linearly interpolate between 4 colors based on their distances
// vec3 interpolateColors(vec3 direction, float NUM_POINTS, ivec3 probe_ipos)
// {
//     NearestPoint[4] nearestPoints = findNearestPoints(direction, NUM_POINTS);

//     // Calculate inverse distances and normalize weights
//     float totalWeight = 0.0;
//     float weights[4];
//     for (int i = 0; i < 4; i++) {
//         weights[i] = 1.0 / nearestPoints[i].distance;
//         totalWeight += weights[i];
//     }

//     for (int i = 0; i < 4; i++) {
//         weights[i] /= totalWeight;
//     }

//     // Interpolate colors
//     vec3 interpolatedColor = vec3(0.0);
//     for (int i = 0; i < 4; i++) {
//         interpolatedColor += weights[i] * get_color(int(nearestPoints[i].index), probe_ipos);
//     }

//     return interpolatedColor;
// }

vec3 sample_probe(ivec3 probe_ipos, vec3 direction){
    // int closest_id = clamp(int(inverseFibonacciPoint(direction).x), 0,RAYS_PER_PROBE-1);
    // ivec3 probe_ipos_clamped = clamp(probe_ipos, ivec3(0), world_size);
    // ivec3 subprobe_pos;
    //       subprobe_pos.x  = probe_ipos_clamped.x*RAYS_PER_PROBE + closest_id; //same as local_pos actually but its optimized away and worth it for modularity
    //       subprobe_pos.yz = probe_ipos_clamped.yz; //reuses but its optimized away
    // // vec3 light = imageLoad(radianceCache, clamp(subprobe_pos, ivec3(0), world_size)).xyz;
    // vec3 light = imageLoad(radianceCache, (subprobe_pos)).xyz;
    // return clamp(light, 0, 1);



    NearestPoint[4] nearestPoints = findNearestPoints(direction, RAYS_PER_PROBE);

    // Calculate inverse distances and normalize weights
    float totalWeight = 0.0;
    float weights[4];
    for (int i = 0; i < 4; i++) {
        weights[i] = 1.0 / nearestPoints[i].distance;
        totalWeight += weights[i];
    }

    for (int i = 0; i < 4; i++) {
        weights[i] /= totalWeight;
    }

    // Interpolate colors
    vec3 interpolatedColor = vec3(0.0);
    for (int i = 0; i < 4; i++) {
        interpolatedColor += weights[i] * get_color(int(nearestPoints[i].index), probe_ipos);
    }

    return interpolatedColor;
}
float square(float a){return a*a;}

vec3 sample_radiance(vec3 position, vec3 normal){
    vec3 sampled_light;

    float total_weight =      0 ;
     vec3 total_colour = vec3(0);

    ivec3 zero_probe_ipos = clamp(ivec3(ceil(position - 8.0))/16, ivec3(0), world_size);
     vec3 zero_probe_pos = vec3(zero_probe_ipos)*16.0 + 8.0;

    vec3 alpha = clamp((position - zero_probe_pos) / 16.0, 0,1);
    // alpha = vec3(1);

    for (int i=0; i<8; i++){
        ivec3 offset = ivec3(i, i >> 1, i >> 2) & ivec3(1);

        float probe_weight =      1 ;
         vec3 probe_colour = vec3(0);

        vec3 probe_pos = zero_probe_pos + vec3(offset)*16.0;

        vec3  probeToPoint = probe_pos - position;
        vec3 direction_to_probe = normalize(probeToPoint);

        vec3 trilinear = mix(1.0-alpha, alpha, vec3(offset));
        probe_weight = trilinear.x * trilinear.y * trilinear.z;

        // probe_weight *= square(max(0.0001, (dot(direction_to_probe, normal) + 1.0) * 0.5)) + 0.2;
        direction_to_probe = normalize(mix(direction_to_probe, normal, 0.8));
        float direction_weight = square(max(0.0001, (dot(direction_to_probe, normal) + 1.0) * 0.5)) + 0.2;
        probe_weight *= direction_weight;
        
        // const float crushThreshold = 0.2;
        // if (probe_weight < crushThreshold) {
        //     probe_weight *= probe_weight * probe_weight * (1.0 / square(crushThreshold)); 
        // }
        
        probe_colour = sample_probe(zero_probe_ipos + offset, direction_to_probe);
        // probe_colour = vec3(zero_probe_ipos + offset) / vec3(world_size);

        probe_weight  = max(1e-7, probe_weight);
        total_weight += probe_weight;
        total_colour += probe_weight * probe_colour;
    }

    return total_colour / total_weight;
}

struct Material{
    varp vec3 color;
    varp float emmitance;
    varp float roughness;
    varp float transparancy;
};
varp vec3 load_norm(highp ivec2 pixel){
    varp vec3 norm = (imageLoad(matNorm, pixel).gba);
    return norm;
}
varp int load_mat(highp ivec2 pixel){
    varp int mat = int(round(imageLoad(matNorm, pixel).x*127.0))+127;
    return mat;
}
highp float load_depth(highp ivec2 pixel){
    highp vec2 uv = (vec2(pixel)+0.5)/vec2(size);
    highp float depth_encoded = texture(depthBuffer, uv).x;
    return (1.0-depth_encoded)*1000.0;
}
Material GetMat(in varp int voxel){
    Material mat;

    mat.color.r      = imageLoad(voxelPalette, ivec2(0,voxel)).r;
    mat.color.g      = imageLoad(voxelPalette, ivec2(1,voxel)).r;
    mat.color.b      = imageLoad(voxelPalette, ivec2(2,voxel)).r;
    // mat.transparancy = 1.0 - imageLoad(voxelPalette, ivec2(3,voxel)).r;
    mat.emmitance    =       imageLoad(voxelPalette, ivec2(4,voxel)).r;
    mat.roughness    =       imageLoad(voxelPalette, ivec2(5,voxel)).r;
    mat.transparancy = 0;

    // mat.smoothness = 0.5;
    // mat.smoothness = 0;
    // if(voxel < 30) 
    // mat.color.rgb = vec3(0.9);
    // mat.color.rgb = clamp(mat.color.rgb,0.2,1);
    // mat.emmitance = .0;
return mat;
}
varp vec3 get_origin_from_depth(varp float depth, varp vec2 uv_pos){
    const varp vec2 view_size = vec2(view_width, view_height);
    const varp vec2 clip_pos_scaled = (2.0*view_size)*(uv_pos)-view_size;
    
    varp vec3 origin = PushConstants.camera_pos.xyz + 
        (horizline*clip_pos_scaled.x) + 
        (vertiline*clip_pos_scaled.y) +
        (PushConstants.camera_direction.xyz*depth);
    return origin;
}


layout(local_size_x = 8, local_size_y = 8) in;
void main(void){
    size = imageSize(outFrame);

    vec3 globalLightDir = normalize(vec3(0.5, 0.5, -0.9));

    cameraRayDirPlane = normalize(vec3(PushConstants.camera_direction.xy, 0));
    horizline = normalize(cross(cameraRayDirPlane, vec3(0,0,1)));
    vertiline = normalize(cross(PushConstants.camera_direction.xyz, horizline));
    
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    const varp vec2 pos = vec2(pix) / vec2(size.x - 1, size.y - 1);

    vec3 final_color = vec3(0);

    const       Material stored_mat = GetMat(load_mat(pix));
    const varp      vec3 stored_accumulated_reflection = vec3(1);
    const varp      vec3 stored_accumulated_light = vec3(0);
    const highp      vec3 stored_direction = PushConstants.camera_direction.xyz;
    const highp      vec3 stored_origin = get_origin_from_depth(load_depth(pix), pos);
    const varp      vec3 stored_normal = load_norm(pix);

    vec3 incoming_light = sample_radiance(stored_origin + 0.1*stored_normal, stored_normal);

    final_color = incoming_light * stored_mat.color;

    imageStore(outFrame, pix, vec4((final_color), 1));
    // imageStore(outFrame, pix, vec4((stored_normal), 1));
}
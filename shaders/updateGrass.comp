#version 450 core

//basically updates grass "marks" texture.. Simple, unefficient and looks cool  

precision highp int;
precision highp float;

layout(set = 0, binding = 0, rg16f) uniform restrict writeonly image2D state;
layout(set = 0, binding = 1) uniform sampler2D perlin_noise;

layout(push_constant) uniform restrict readonly constants{
    vec2 windDirection, collisionPoint;
    float time;
} pco;

const ivec3 world_size = ivec3(48,48,16);

//honestly it will be like 4 wavegroups i dont think i need to balance it. 
layout(local_size_x = 8, local_size_y = 8, local_size_z = 1) in;
void main(){
    ivec2 pix = ivec2(gl_GlobalInvocationID.xy);
    vec2 pos = (vec2(pix) + 0.5) /16.0;

    // vec2 old_direction = imageLoad(state, pix).xy;
    vec2 new_direction = vec2(0);

    // vec2 direction = vec2(sin(pco.time / 600.0), cos(pco.time / 600.0));
    vec2 direction = vec2(1, 1);
    
    vec2 uv_shift = direction * pco.time / 300.0;
    vec2 noise_uv = (pos) + uv_shift;
    
    new_direction.x = textureGrad(perlin_noise, noise_uv, vec2(1.0/96.0,0), vec2(0)).x;
    new_direction.y = textureGrad(perlin_noise, noise_uv, vec2(0), vec2(0,1.0/96.0)).x;
    // new_direction = normalize(new_direction)*2.0;
    // new_direction *= 2.0;
    // new_direction.x = 0;
    // new_direction.y = 0;
    // vec2 tg = texture(perlin_noise, pos*pco.time).xx;
    // vec2 tg = mod(pos*pco.time/100.0,5.0);
    // //global wave wiggling from wind
    //yeah ~32 iteration, but this will be offloaded to compute shader+texture soon
    // for(float freq=3.0; freq < 100.0; freq *= 1.15){
    //     float ampl = 0.3 / freq;
    //     float t = pco.time / 300.0;
    //     new_direction += sin((t + dot(pos*128.0,direction)/400.0)*freq) * ampl;
    // }

    // float collision_ratio = 2.0/length(pos - pco.collisionPoint);
    // vec2 collision_direction = -normalize(pco.collisionPoint - pos);

    // new_direction = mix(
    //     new_direction, 
    //     collision_direction * 1.0,
    //     collision_ratio
    // );

    // new_direction = normalize(tg);
    // new_direction = (tg);
    // new_direction = vec2(0);
    imageStore(state, pix, vec4(new_direction,0,0));
}
#version 450

#define varp highp

precision varp float;
precision varp int;

#extension GL_KHR_shader_subgroup_arithmetic : enable
#extension GL_KHR_shader_subgroup_shuffle : enable

layout(set = 0, binding = 0, rgba8) uniform image2D   lowres_matNorm;
layout(set = 0, binding = 1, rgba8) uniform image2D  highres_matNorm;
layout(set = 0, binding = 2, rgba16) uniform image2D  denoised_frame; //in
layout(set = 0, binding = 3, rgba16) uniform image2D  upscaled_frame; //out

ivec2 size;
vec2 ratio;

vec3 load_lowres_norm(ivec2 pixel){
    vec3 norm = (imageLoad(lowres_matNorm, pixel).gba);
    return norm;
}
vec3 load_highres_norm(ivec2 pixel){
    vec3 norm = (imageLoad(highres_matNorm, pixel).gba);
    return norm;
}
int load_lowres_mat(ivec2 pixel){
    int mat = int(round(imageLoad(lowres_matNorm, pixel).x*127.0))+127;
    return mat;
}
int load_highres_mat(ivec2 pixel){
    int mat = int(round(imageLoad(highres_matNorm, pixel).x*127.0))+127;
    return mat;
}

const float COLOR_ENCODE_VALUE = 5.0;
vec3 decode_color(vec3 encoded_color){
    return clamp(encoded_color,0,1)*vec3(COLOR_ENCODE_VALUE);
}
vec3 encode_color(vec3 color){
    return clamp(color/vec3(COLOR_ENCODE_VALUE), 0,1);
}

int decode_mat(in float fmat) {
    return int(round(fmat*127.0))+127;
}

//TODO Specialization constants

layout(local_size_x=8, local_size_y=8) in;
void main(){
    highp ivec2 highres_pix = ivec2(gl_GlobalInvocationID.xy);
    highp ivec2  lowres_size = imageSize( lowres_matNorm);
    highp ivec2 highres_size = imageSize(highres_matNorm);

     int highres_mat = decode_mat(imageLoad(highres_matNorm, highres_pix).x);
    vec3 highres_normal = ((imageLoad(highres_matNorm, highres_pix).yzw));

    highp ivec2 ll_lowres_pix = ((highres_pix + ivec2(0,0))*lowres_size) / highres_size;
    highp ivec2 lh_lowres_pix = ((highres_pix + ivec2(0,1))*lowres_size) / highres_size;
    highp ivec2 hl_lowres_pix = ((highres_pix + ivec2(1,0))*lowres_size) / highres_size;
    highp ivec2 hh_lowres_pix = ((highres_pix + ivec2(1,1))*lowres_size) / highres_size;

    int ll_lowres_mat = decode_mat(imageLoad(lowres_matNorm, ll_lowres_pix).x);
    int lh_lowres_mat = decode_mat(imageLoad(lowres_matNorm, lh_lowres_pix).x);
    int hl_lowres_mat = decode_mat(imageLoad(lowres_matNorm, hl_lowres_pix).x);
    int hh_lowres_mat = decode_mat(imageLoad(lowres_matNorm, hh_lowres_pix).x);


    
    // float ll_dist = distance((vec2(pix)+.5), (vec2(ll_lowres_pix)+.5));
    // float lh_dist = distance((vec2(pix)+.5), (vec2(lh_lowres_pix)+.5));
    // float hl_dist = distance((vec2(pix)+.5), (vec2(hl_lowres_pix)+.5));
    // float hh_dist = distance((vec2(pix)+.5), (vec2(hh_lowres_pix)+.5));

    float ll_weight = float(ll_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, ll_lowres_pix).w - highres_depth)/2000); //);
    float lh_weight = float(lh_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, lh_lowres_pix).w - highres_depth)/2000); //);
    float hl_weight = float(hl_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, hl_lowres_pix).w - highres_depth)/2000); //);
    float hh_weight = float(hh_lowres_mat == highres_mat); // * exp(- abs((imageLoad(lowres_Gbuffer, hh_lowres_pix).w - highres_depth)/2000); //);

    // ll_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, ll_lowres_pix).yzw))), 0, 1), 1);
    // lh_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, lh_lowres_pix).yzw))), 0, 1), 1);
    // hl_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, hl_lowres_pix).yzw))), 0, 1), 1);
    // hh_weight *= pow(clamp(dot(highres_normal, ((imageLoad(lowres_matNorm, hh_lowres_pix).yzw))), 0, 1), 1);

    ll_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, ll_lowres_pix).yzw) > 0.5));
    lh_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, lh_lowres_pix).yzw) > 0.5));
    hl_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, hl_lowres_pix).yzw) > 0.5));
    hh_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, hh_lowres_pix).yzw) > 0.5));

    // ll_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, ll_lowres_pix).yzw) > 0.5));
    // lh_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, lh_lowres_pix).yzw) > 0.5));
    // hl_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, hl_lowres_pix).yzw) > 0.5));
    // hh_weight *= float((dot(highres_normal, imageLoad(lowres_matNorm, hh_lowres_pix).yzw) > 0.5));

    vec3 ll_lowres_color = decode_color(imageLoad(denoised_frame, ll_lowres_pix).rgb);
    vec3 lh_lowres_color = decode_color(imageLoad(denoised_frame, lh_lowres_pix).rgb);
    vec3 hl_lowres_color = decode_color(imageLoad(denoised_frame, hl_lowres_pix).rgb);
    vec3 hh_lowres_color = decode_color(imageLoad(denoised_frame, hh_lowres_pix).rgb);


    ll_weight += 0.0001; //to always have color

    vec3 color = (
        ll_lowres_color * ll_weight+
        lh_lowres_color * lh_weight+
        hl_lowres_color * hl_weight+
        hh_lowres_color * hh_weight        
    );
    float weight = (
        ll_weight+
        lh_weight+
        hl_weight+
        hh_weight   
    );


    vec3 final_color = color / weight;
         final_color = ll_lowres_color;

    imageStore(upscaled_frame, highres_pix, vec4(encode_color(final_color),1));
    // imageStore(upscaled_frame, highres_pix, vec4(encode_color(vec3(highres_pix.x / 1000.0)),1));
}
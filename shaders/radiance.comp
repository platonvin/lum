#version 450 core

//sadly there is no easy way to use specialization constants for this
// #define highp
precision highp int;
precision highp float;

#extension GL_KHR_shader_subgroup_arithmetic : enable
// #extension GL_EXT_control_flow_attributes : enable
#extension GL_EXT_shader_8bit_storage : enable
// #extension GL_EXT_shader_16bit_storage : enable
#extension GL_EXT_shader_explicit_arithmetic_types : enable
// #extension GL_EXT_scalar_block_layout : enable

//well, its not really radiance. Its more of a minecraft lighting but raytraced
//its not that realistic but imho looks good
//ATTENTION: 64 required not to waste 50% perfomance "HW CTA Slot limited"
//but to share data and not waste 50% again, shared memory used

layout(set = 0, binding = 0) uniform isampler3D blocks;
layout(set = 0, binding = 1) uniform usampler3D blockPalette;
layout(set = 0, binding = 2) uniform sampler2D voxelPalette;
// layout(set = 0, binding = 3, rgba16     ) uniform image3D radianceCache;
// A2B10G10R10_UNORM_PACK32
layout(set = 0, binding = 3) uniform sampler3D radianceCache2read;
layout(set = 0, binding = 4, rgb10_a2) uniform writeonly coherent image3D radianceCache2write;

layout(std430,set = 0, binding = 5) restrict readonly buffer ReqBuffer{
	i8vec4 updateReqests[];
} reqBuffer;

layout(constant_id = 1) const int BLOCK_PALETTE_SIZE_X = 64;
layout(constant_id = 2) const float REACTIVNESS = 0.01;

layout(push_constant) uniform restrict readonly constants{
    int timeSeed;
    int iters;
    int size;
    int sihft;
} pco;

#define SUBGROUPS_PER_WORKGROUP 2
#define RAYS_PER_PROBE (32*SUBGROUPS_PER_WORKGROUP) //TODO: change to spec const
//funniest thing is that it should even work on amd, tho _light might take twice more

const float PI = 3.1415926535897932384626433832795;
const ivec3 world_size = ivec3(48,48,16);
vec3 globalLightDir = normalize(vec3(0.5, 0.5, -0.9));

struct Material{
    vec3 color;
    float emmitance;
    float roughness;
    float transparancy;
};

// int random_storage;
// float Random1D() {
//     float dot_product = dot(random_storage, vec2(12.9898, 78.233));
//     float sin_result = sin(dot_product * 43758.5453123);
//     float fractional_part = fract(sin_result);

//     // for the next call
//     random_storage.x = random_storage.y;
//     random_storage.y += fractional_part*1241.1241;

//     return fractional_part;
// }
// vec2 Random2D() {return vec2(Random1D(), Random1D());}
// vec3 Random3D() {return vec3(Random1D(), Random1D(), Random1D());}

const uint k = 1103515245U;  // GLIB C
vec3 hash33( uvec3 x )
{
    x = ((x>>8U)^x.yzx)*k;
    x = ((x>>8U)^x.yzx)*k;
    x = ((x>>8U)^x.yzx)*k;
    
    return vec3(x)*(1.0/float(0xffffffffU));
}

uvec3 random_storage;
vec3 Random3D() {
    vec3 res = hash33(random_storage);
    random_storage.x++;
    return res;
}

vec3 randomSpherePoint(vec3 rand) {
    float ang1 = (rand.x + 1.0) * PI; // [-1..1) -> [0..2*PI)
    float u = rand.y; // [-1..1), cos and acos(2v-1) cancel each other out, so we arrive at [-1..1)
    float u2 = u * u;
    float sqrt1MinusU2 = sqrt(1.0 - u2);
    float x = sqrt1MinusU2 * cos(ang1);
    float y = sqrt1MinusU2 * sin(ang1);
    float z = u;
    return vec3(x, y, z);
}

vec3 NormalOrientedHemispherePoint(vec3 rand, vec3 n){
    vec3 v = randomSpherePoint(rand);
    return v * sign(dot(v, n));
}

vec3 randomCosineWeightedHemispherePoint(vec3 rand, vec3 n) {
    float r = rand.x * 0.5 + 0.5; // [-1..1) -> [0..1)
    float angle = PI*rand.y + PI; // [-1..1] -> [0..2*PI)
    float sr = sqrt(r);
    vec2 p = vec2(sr * cos(angle), sr * sin(angle));
    vec3 ph = vec3(p.xy, sqrt(1.0 - p*p));
    vec3 tangent = normalize(rand);
    vec3 bitangent = cross(tangent, n);
    tangent = cross(bitangent, n);
    
    return tangent * ph.x + bitangent * ph.y + n * ph.z;
}

int GetBlock(in ivec3 block_pos){
    int block;
    // block = int((imageLoad(blocks, block_pos).r));
    // block = int((textureLod(blocks, (block_pos+0.5)/vec3(world_size), 0).r));
    block = int((texelFetch(blocks, (block_pos), 0).r));
    return block;
}

ivec3 voxel_in_palette(ivec3 relative_voxel_pos, int block_id) {
    int block_x = block_id % BLOCK_PALETTE_SIZE_X;
    int block_y = block_id / BLOCK_PALETTE_SIZE_X;

    return relative_voxel_pos + ivec3(16*block_x, 16*block_y, 0);
}

ivec3 voxel_in_bit_palette(ivec3 relative_voxel_pos, int block_id) {
    int block_x = block_id % BLOCK_PALETTE_SIZE_X;
    int block_y = block_id / BLOCK_PALETTE_SIZE_X;

    return relative_voxel_pos + ivec3(0+2*block_x, 0+16*block_y,0);
}

ivec2 GetVoxel(in vec3 pos){    
    int voxel;
    ivec3 ipos = ivec3(pos);
    ivec3 iblock_pos = ipos / 16;
    ivec3 relative_voxel_pos = ipos % 16;
    int block_id = GetBlock(iblock_pos);
    ivec3 voxel_pos = voxel_in_palette(relative_voxel_pos, block_id);
    voxel = int(texelFetch(blockPalette, (voxel_pos), 0).r);

    return ivec2(voxel, block_id);
}

// void SetVoxel(in ivec3 pos, in uint voxel){
//     ivec3 block_pos = pos / 16;
//     ivec3 relative_voxel_pos = pos % 16;

//     int block_id = GetBlock(block_pos);
//     ivec3 voxel_pos = voxel_in_palette(relative_voxel_pos, block_id);
    
//     imageStore(blockPalette, voxel_pos, uvec4(voxel));
// }

Material GetMat(in int voxel){
    Material mat;

    mat.color.r      = texelFetch(voxelPalette, ivec2(0,voxel), 0).r;
    mat.color.g      = texelFetch(voxelPalette, ivec2(1,voxel), 0).r;
    mat.color.b      = texelFetch(voxelPalette, ivec2(2,voxel), 0).r;
    // mat.transparancy = 1.0 - texelFetch(voxelPalette, ivec2(3,voxel), 0).r;
    mat.emmitance    =       texelFetch(voxelPalette, ivec2(4,voxel), 0).r;
    mat.roughness    =       texelFetch(voxelPalette, ivec2(5,voxel), 0).r;
    return mat;
}
// vec3 sample_probe(ivec3 probe_ipos, vec3 direction){
//     // int closest_id = clamp(int(inverseFibonacciPoint(direction).x), 0,RAYS_PER_PROBE-1);
//     ivec3 probe_ipos_clamped = clamp(probe_ipos, ivec3(0), world_size);
//     ivec3 subprobe_pos;
//           subprobe_pos.x  = probe_ipos_clamped.x; //same as local_pos actually but its optimized away and worth it for modularity
//           subprobe_pos.yz = probe_ipos_clamped.yz; //reuses but its optimized away
//     // vec3 light = imageLoad(radianceCache, clamp(subprobe_pos, ivec3(0), world_size)).xyz;
//     vec3 light = imageLoad(radianceCache, (subprobe_pos)).xyz;
//     return clamp(light, 0, 2);
// }
float square(float a){return a*a;}

vec3 sample_radiance(vec3 position, vec3 normal){
    vec3 block_pos = (position+normal*16.0) / 16.0;
    vec3 sampled_light = textureLod(radianceCache2read, (block_pos+0.5) / vec3(world_size), 0).rgb;

    return sampled_light;
}

bool initTvals(out vec3 tMax, out vec3 tDelta, out ivec3 blockPos, in vec3 rayOrigin, in vec3 rayDirection){
    vec3 effective_origin = rayOrigin;

    vec3 block_corner1 = (floor(effective_origin) - effective_origin)/rayDirection; //now corners are relative vectors
    vec3 block_corner2 = (floor(effective_origin) - effective_origin)/rayDirection  + 1.0/rayDirection;
    tMax.x = max(block_corner1.x, block_corner2.x); //1 of theese will be negative so max is just to get positive
    tMax.y = max(block_corner1.y, block_corner2.y);
    tMax.z = max(block_corner1.z, block_corner2.z);

    tDelta = 1.0 / abs(rayDirection); //how many dir vectors needeed to move 1.0 across each axys
    blockPos = ivec3(effective_origin); //round origin to block pos

    return true;
}

bool CastRay_fast(in vec3 origin, in vec3 direction, 
        out float fraction, out vec3 normal, out Material material,
        out bool left_bounds){
    bool block_hit = false;

    vec3 voxel_pos = vec3(0);
    // vec3 orig = vec3(0);
    bvec3 currentStepDiretion = bvec3(false);

    // int max_steps = 256;
    float max_dist = 16.0*8.0; //TODO: quality settings

    int current_voxel = GetVoxel(origin).x;
    int current_block = GetVoxel(origin).y;

    vec3 one_div_dir = 1.0 / direction;    
    bvec3 bprecomputed_corner = greaterThan(direction, vec3(0));
    vec3 precomputed_corner = vec3(bprecomputed_corner) * 16.0;

    int iterations = 0;
    fraction = 0;
    // [[loop]]
    while (true) {
        fraction += 0.5;

        vec3 pos = origin + direction*fraction;
        // voxel_pos = ivec3(pos);

            current_voxel = GetVoxel(pos).x;
            current_block = GetVoxel(pos).y;
        
            if(current_block == 0){
                vec3 box_precomp = vec3((ivec3(pos) / 16)*16) + precomputed_corner;
                vec3 temp = -pos*one_div_dir;
                vec3 block_corner = box_precomp*one_div_dir + temp;
                
                float _f = min(block_corner.x, min(block_corner.y, block_corner.z));
                float f = max(_f,0.01); //safity
                // float f = clamp(_f,0,16.0*sqrt(3.0)); //safity

                fraction += f;
            }
        
        if (current_voxel != 0){
            block_hit = true;
            break;
        }

        if (any(lessThan(pos,vec3(0))) || any(greaterThanEqual(pos, world_size*vec3(16)))) {
            block_hit = false;
            left_bounds = true;
            break;
        }
        // if (iterations++ >= max_steps) {
        if (fraction >= max_dist) {
            block_hit = false;
            left_bounds = true;
            break;
        }
    }

    vec3 before_hit = origin + direction*(fraction-1.5);

//todo:
    if(current_voxel !=0)
    {
        ivec3 steps = ivec3(greaterThan(direction, vec3(0)));
        steps = 2 * steps + (-1);

        vec3 tMax, tDelta;
        ivec3 voxel_pos;
        
        vec3 block_corner1 = (floor(before_hit) - before_hit)/direction; //now corners are relative vectors
        vec3 block_corner2 = (floor(before_hit) - before_hit)/direction  + 1.0/direction;
        tMax.x = max(block_corner1.x, block_corner2.x); //1 of theese will be negative so max is just to get positive
        tMax.y = max(block_corner1.y, block_corner2.y);
        tMax.z = max(block_corner1.z, block_corner2.z);

        tDelta = 1.0 / abs(direction); //how many dir vectors needeed to move 1.0 across each axys
        voxel_pos = ivec3(before_hit); //round origin to block pos

        vec3 fcurrentStepDiretion = vec3(0);
        int current_voxel_id = GetVoxel(voxel_pos).x;
        int iterations = 0;
        // [[unroll]] //why
        while ((iterations++ <= 4) && (current_voxel_id == 0)) {
            // initTvals(tMax, tDelta, voxel_pos, rayOrigin+dot(tMax - tDelta, fcurrentStepDiretion)*rayDirection, rayDirection); //does not intersect with scene
            // fstep_Diretion =  vec3(0);
            fcurrentStepDiretion.x = float(int((tMax.x <= tMax.y) && (tMax.x <= tMax.z)));
            fcurrentStepDiretion.y = float(int((tMax.x >= tMax.y) && (tMax.y <= tMax.z)));
            fcurrentStepDiretion.z = float(int((tMax.z <= tMax.x) && (tMax.z <= tMax.y)));

            voxel_pos += steps * ivec3(fcurrentStepDiretion);
            tMax += tDelta * fcurrentStepDiretion;

            current_voxel_id = GetVoxel(voxel_pos).x;
        }

        normal = -(vec3(steps) * fcurrentStepDiretion);
        vec3 tFinal = tMax - tDelta;
        fraction = dot(tFinal, fcurrentStepDiretion);

        material = GetMat(current_voxel_id);
    }

    return (current_voxel !=0);
}

//is actually precise
// bool CastRay_precise(in vec3 rayOrigin, in vec3 rayDirection, 
//         out float fraction, out vec3 normal, out Material material){
//     bool block_hit = false;

//     ivec3 steps;
//     steps = ivec3(greaterThan(rayDirection, vec3(0)));
//     steps = 2 * steps + (-1);

//     vec3 fsteps = vec3(steps);

//     vec3 tMax = vec3(0);
//     vec3 tDelta = vec3(0);
//     ivec3 voxel_pos = ivec3(0);
//     float block_fraction = 0.0;

//     ivec3 fcurrentStepDiretion = ivec3(0);

//     initTvals(tMax, tDelta, voxel_pos, rayOrigin, rayDirection); //does not intersect with scene
    
//     int current_voxel = GetVoxel(voxel_pos);

//     int max_steps = 512;
    
//     int iterations = 0;
//     while (true) {

//         bool xLy = tMax.x <= tMax.y;
//         bool xLz = tMax.x <= tMax.z;
//         bool yLz = tMax.y <= tMax.z;

//         //LOL no perfomance benefit currently but it was there last time i tested it TODO
//         fcurrentStepDiretion.x = int(int(( xLy) && ( xLz)));
//         fcurrentStepDiretion.y = int(int((!xLy) && ( yLz)));
//         fcurrentStepDiretion.z = int(int((!xLz) && (!yLz)));

//         voxel_pos += steps * ivec3(fcurrentStepDiretion);
//         tMax += tDelta * fcurrentStepDiretion;

        
//         current_voxel = GetVoxel(voxel_pos);
        
//         if (current_voxel != 0){
//             block_hit = true;
//             break;
//         }
//         // if (any(lessThan(voxel_pos,ivec3(0))) || any(greaterThanEqual(voxel_pos, world_size*ivec3(16)))) {
//         //     block_hit = false;
//         //     break;
//         // }
//         if ((iterations++ >= max_steps) || (any(lessThan(voxel_pos,ivec3(0))) || any(greaterThanEqual(voxel_pos, world_size*ivec3(16))))) {
//             block_hit = false;
//             break;
//         }
//     }


//     normal = -(fsteps * fcurrentStepDiretion);
//     vec3 tFinal = tMax - tDelta;
//     // block_fraction += dot(tFinal, fcurrentStepDiretion);
//     block_fraction = dot(tFinal, fcurrentStepDiretion);

//     material = GetMat(current_voxel);
//     fraction = block_fraction;

//     return (block_hit);
// }

// void ProcessHit(inout vec3 origin, inout vec3 direction, 
//                 in float fraction, in vec3 normal, in Material material, 
//                 inout vec3 accumulated_light, inout vec3 accumulated_reflection){

//             vec3 new_origin = origin + (fraction * direction);

//             // vec3 hemisphereDistributedDirection = NormalOrientedHemispherePoint(Random3D(), normal);

//             // vec3 new_direction = hemisphereDistributedDirection;

//                 // new_direction = normalize(mix(idealReflection, new_direction, material.roughness));

//                 vec3 new_direction = reflect(direction, normal);
//                 new_origin += normal * 0.001;
//                 accumulated_reflection *= material.color;
//                 accumulated_light += accumulated_reflection * material.emmitance;
//                 // accumulated_light += vec3(0.8) * 0.1 * accumulated_reflection;

//             // direction = reflect(direction,normal);
//             direction = new_direction;
//             origin = new_origin;

// }

vec3 sphericalFibonacci(float i, float n) {
    const float PHI = sqrt(5.0) * 0.5 + 0.5;
#   define madfrac(A, B) ((A)*(B)-floor((A)*(B)))
    float phi = 2.0 * PI * madfrac(i, PHI - 1);
    float cosTheta = 1.0 - (2.0 * i + 1.0) * (1.0 / n);
    float sinTheta = sqrt(clamp(1.0 - cosTheta * cosTheta, 0, 1));

    return vec3(
        cos(phi) * sinTheta,
        sin(phi) * sinTheta,
        cosTheta);

#   undef madfrac
}
//calculates ray direction from probe_id distributing ray_dir's over sphere
vec3 probeId_to_rayDir(int probe_id){
    vec3 direction = vec3(0);

    direction = sphericalFibonacci(float(probe_id), float(RAYS_PER_PROBE));

    return direction;
}

vec3 trace_ray(vec3 ray_pos, vec3 ray_dir){
    float fraction = 0.0;
    vec3 normal = vec3(0);

    vec3 origin = ray_pos;
    vec3 direction = ray_dir;

    vec3 light = vec3(0);
    vec3 reflection = vec3(1);
    bool hit = false;
    bool left_bounds = false;
    Material material;
    
    hit = CastRay_fast(origin, direction, fraction, normal, material, left_bounds);

    if(hit){
        vec3 propagated_light = sample_radiance(origin+fraction*direction, normal);
        light += reflection*propagated_light*material.color + material.color*material.emmitance;
    } else {
        float global_light_participance = -dot(direction, globalLightDir);
        if (global_light_participance > 0.95) {
            // if (global_light_participance > 0.95) {
            light += reflection * global_light_participance * (vec3(0.9,0.9,0.6)*3.0);
        } 
        // else {
            //sky blue
            light += reflection * (vec3(0.53,0.81,0.92)*0.1);
        // }
    }

    return light;
}

void store_probe(ivec3 probe_pos, vec3 accumulated_light){
    //probes are stored as 32-wide lines for x in world_size 3d images
    // ivec3 subprobe_pos;
    //       subprobe_pos.x  = probe_pos.x; //same as local_pos actually but its optimized away and worth it for modularity
    //       subprobe_pos.yz = probe_pos.yz; //reuses but its optimized away

    // vec3 old_light = clamp(texelFetch(radianceCache2read, probe_pos, 0).xyz, 0, 1);
    vec3 old_light = (texelFetch(radianceCache2read, probe_pos, 0).xyz);
    // vec3 old_light = clamp(imageLoad(radianceCache2write, probe_pos).xyz, 0, 1);

    vec3 new_light = mix(old_light, accumulated_light, REACTIVNESS);

    // new_light = vec3(probe_pos) / vec3(world_size);
    // imageAtomicDiv
    imageStore(radianceCache2write, probe_pos, vec4(new_light,1));
}

//im tired of naming things, no one is gonna read this anyways
shared vec3 _light[SUBGROUPS_PER_WORKGROUP];

// layout(local_size_x = RAYS_PER_PROBE, local_size_y = 1, local_size_z = 1) in;
layout(local_size_x = RAYS_PER_PROBE, local_size_y = 1, local_size_z = 1) in;
void main(){
    ivec3 local_pos = ivec3(gl_GlobalInvocationID.xyz);

    // float seed = float(pco.timeSeed);
    // random_storage = vec2((local_pos.x*seed*5123.12315), (local_pos.y*seed*7152.7343));
    
    int probe_id = local_pos.x % RAYS_PER_PROBE;
    // int probe_id = local_pos.x % (RAYS_PER_PROBE/2) + local_pos.y * (RAYS_PER_PROBE/2);

    int _r = local_pos.x / (RAYS_PER_PROBE);

    int req_num = _r*pco.size + pco.sihft;
    ivec4 _t = reqBuffer.updateReqests[req_num];
    // _t = ivec4(1);
    ivec3 probe_pos = _t.xyz;
    // if(probe_pos == ivec3(0)) {
    random_storage = uvec3(local_pos.xy+pco.timeSeed, pco.timeSeed);
    // if(any(notEqual(probe_pos,ivec3(0)))) {
    //     store_probe(probe_id, ivec3(local_pos.x, local_pos.y, 1), vec3(1));
    //     store_probe(probe_id, ivec3(probe_pos.x,probe_pos.y, local_pos.y), vec3(1));
    //     return;
    // }

    // ivec3 probe_pos = ivec3(local_pos);
    //       probe_pos.x /= RAYS_PER_PROBE;

    vec3 block_corner = vec3(probe_pos) * 16.0;
    vec3 block_center = block_corner + 8.0;
    vec3 ray_pos = block_center;
        //  ray_pos += 15.99*(Random3D() - 0.5);
    vec3 ray_dir = probeId_to_rayDir(probe_id);
    // vec3 ray_dir;
        //  ray_dir = normalize(mix(ray_dir, NormalOrientedHemispherePoint(Random3D(), ray_dir), 0.8));
        //  ray_dir = normalize(ray_dir + 1.0 * (Random3D() - 0.5));
        
         ray_dir = normalize(ray_dir + .1 * ((Random3D() - 0.5)*2.0));
         ray_pos += ray_dir*6.0;
         ray_pos += (Random3D()-0.5)*2.0;
         ray_dir = ((probe_id%2)==0)? ray_dir : -ray_dir; //to sample light blocks themselves
        //  ray_dir = normalize(((Random3D() - 0.5)));

        //  ray_dir = normalize(((Random3D() - 0.5)));
        //  ray_pos = block_corner + Random3D()*16.0;
         
        // ray_dir = randomCosineWeightedHemispherePoint(Random3D(), ray_dir);
        // ray_dir = 2.0 * (Random3D() - 0.5);
        // ray_dir = normalize(ray_pos - block_center);

    // randomVec = vec3(local_pos.x, local_pos.y, local_pos.z);
    
    vec3 ray_light = trace_ray(ray_pos, ray_dir);
    // vec3 ray_light;;
    // ray_light = subgroupAdd(ray_light) / gl_SubgroupSize;
    // subgroupBarrier();
    ray_light = subgroupAdd(ray_light) / float(clamp(RAYS_PER_PROBE, 0, gl_SubgroupSize));
    // subgroupBarrier();

    //version that syncs globally via VkBarriers
    //ATTENTION: limited to 50% perfomance
    // if(subgroupElect()){
    //     store_probe(probe_id, probe_pos, ray_light/2.0);
    // }

    //version that syncs locally via shared memory
    //somehow it is ~2x faster
    if(subgroupElect()){
        _light[gl_SubgroupID] = ray_light;
        barrier();

        vec3 final_light = vec3(0);
        for(int i=0; i<SUBGROUPS_PER_WORKGROUP; i++){
            final_light += _light[i];
        }
        final_light /= float(SUBGROUPS_PER_WORKGROUP);
        // final_light = ray_light;
        // final_light = vec3(1);
        // final_light = clamp(final_light, 0,1);

        if(gl_SubgroupID == 0){
            // final_light = vec3(1);
            store_probe(probe_pos, final_light);
        }
    }
}